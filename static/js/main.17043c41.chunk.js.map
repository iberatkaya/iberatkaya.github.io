{"version":3,"sources":["components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","linkStyle","fontSize","iconLinkStyle","marginRight","launchLink","str","window","open","Navbar","collapseOnSelect","expand","bg","variant","fixed","Nav","Link","style","href","Toggle","Collapse","className","alignItems","onClick","size","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAKe,SAASA,IACpB,IAAIC,EAAiC,CAACC,SAAU,IAC5CC,EAAqC,CAACC,YAAa,GAEnDC,EAAa,SAACC,GAAD,OAAiBC,OAAOC,KAAKF,EAAK,WAEnD,OACI,kBAACG,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,OAChE,kBAACC,EAAA,EAAIC,KAAL,CAAUC,MAAOhB,EAAWiB,KAAK,QAAjC,QACA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,MAAOhB,EAAWiB,KAAK,YAAjC,YACA,kBAACT,EAAA,EAAOU,OAAR,MACA,kBAACV,EAAA,EAAOW,SAAR,KACI,kBAACL,EAAA,EAAD,CAAKM,UAAU,UAAUJ,MAAO,CAACK,WAAY,WACzC,kBAACP,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,qDAAoD,kBAAC,IAAD,CAAcmB,KAAM,MAClI,kBAACT,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,mCAAkC,kBAAC,IAAD,CAAUmB,KAAM,MAC5G,kBAACT,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,kEAAiE,kBAAC,IAAD,CAAYmB,KAAM,MAC7I,kBAACT,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,8DAA6D,kBAAC,IAAD,CAAcmB,KAAM,MAC3I,kBAACT,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,8CAA6C,kBAAC,IAAD,CAAamB,KAAM,MAC1H,kBAACT,EAAA,EAAIC,KAAL,CAAUC,MAAOd,EAAeoB,QAAS,kBAAMlB,EAAW,qCAAoC,kBAAC,IAAD,CAAWmB,KAAM,SCTpHC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17043c41.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { FaInstagram, FaTwitter, FaLinkedinIn, FaGithub, FaAppStore, FaGooglePlay } from \"react-icons/fa\";\n\nexport default function NavBar() {\n    let linkStyle: React.CSSProperties = {fontSize: 18};\n    let iconLinkStyle: React.CSSProperties = {marginRight: 2};\n\n    let launchLink = (str: string) => window.open(str, \"_blank\");\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\n            <Nav.Link style={linkStyle} href=\"home\">Home</Nav.Link>\n            <Nav.Link style={linkStyle} href=\"projects\">Projects</Nav.Link>\n            <Navbar.Toggle/>\n            <Navbar.Collapse>\n                <Nav className=\"ml-auto\" style={{alignItems: \"center\"}}>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://www.linkedin.com/in/ibrahim-berat-kaya/\")}><FaLinkedinIn size={24}/></Nav.Link>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://github.com/iberatkaya\")}><FaGithub size={24}/></Nav.Link>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://apps.apple.com/us/developer/selim-ustel/id1498230191\")}><FaAppStore size={24}/></Nav.Link>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://play.google.com/store/apps/developer?id=IBK+Apps\")}><FaGooglePlay size={24}/></Nav.Link>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://www.instagram.com/ibraberatkaya/\")}><FaInstagram size={24}/></Nav.Link>\n                    <Nav.Link style={iconLinkStyle} onClick={() => launchLink(\"https://twitter.com/ibolasberat\")}><FaTwitter size={24}/></Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}